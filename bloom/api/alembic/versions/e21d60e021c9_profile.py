"""profile

Revision ID: e21d60e021c9
Revises: b81147deeb10
Create Date: 2024-11-27 22:33:46.446020

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e21d60e021c9'
down_revision: Union[str, None] = 'b81147deeb10'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

preset_complications = [
    {
        "name": "None",
        "description": "No complications"
    },
    {
        "name": "Multiple Pregnancy",
        "description": "Pregnancy with more than one fetus"
    },
    {
        "name": "Threatened Preterm Labor",
        "description": "Signs or symptoms of labor before 37 weeks of pregnancy"
    },
    {
        "name": "Threatened Miscarriage",
        "description": "Signs or symptoms indicating potential pregnancy loss"
    },
    {
        "name": "Fetal Growth Restriction",
        "description": "Condition where fetus is smaller than expected for gestational age"
    },
    {
        "name": "Placenta Previa",
        "description": "Condition where placenta covers part or all of cervix"
    },
    {
        "name": "Cervical Insufficiency",
        "description": "Condition where cervix begins to dilate and efface before term"
    }
]

preset_conditions = [
    {
        "name": "None",
        "description": "No pre-existing conditions"
    },
    {
        "name": "Diabetes",
        "description": "Pre-existing diabetes mellitus (Type 1 or Type 2)"
    },
    {
        "name": "Hypertension",
        "description": "Pre-existing high blood pressure"
    },
    {
        "name": "Retinopathy",
        "description": "Disease affecting the retina of the eye"
    },
    {
        "name": "Heart Disease",
        "description": "Pre-existing cardiac conditions"
    },
    {
        "name": "Thyroid Disease",
        "description": "Conditions affecting thyroid function"
    },
    {
        "name": "Asthma",
        "description": "Chronic respiratory condition"
    },
    {
        "name": "Epilepsy",
        "description": "Neurological disorder causing seizures"
    }
]



def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('bloom_preset_complications',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False, comment='preset complication name'),
    sa.Column('description', sa.Text(), nullable=True, comment='complication description'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='whether this complication is available for selection'),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('bloom_preset_conditions',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False, comment='preset disease name'),
    sa.Column('description', sa.Text(), nullable=True, comment='disease description'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='whether this condition is available for selection'),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('bloom_user_complications',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('profile_id', sa.BigInteger(), nullable=False),
    sa.Column('preset_complication_id', sa.BigInteger(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['preset_complication_id'], ['bloom_preset_complications.id'], ),
    sa.ForeignKeyConstraint(['profile_id'], ['bloom_profiles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('bloom_user_conditions',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('profile_id', sa.BigInteger(), nullable=False),
    sa.Column('preset_condition_id', sa.BigInteger(), nullable=False),
    sa.Column('level', sa.Integer(), nullable=True, comment='disease level: 1-mild, 2-moderate, 3-severe'),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['preset_condition_id'], ['bloom_preset_conditions.id'], ),
    sa.ForeignKeyConstraint(['profile_id'], ['bloom_profiles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_column('bloom_profiles', 'condition_level')
    op.drop_column('bloom_profiles', 'condition')
    op.drop_column('bloom_profiles', 'complications')
    # ### end Alembic commands ###

    # Insert preset complications
    for complication in preset_complications:
        op.execute(
            f"INSERT INTO bloom_preset_complications (name, description, is_active, created_at, updated_at) "
            f"VALUES ('{complication['name']}', '{complication['description']}', true, now(), now())"
        )

    # Insert preset conditions
    for condition in preset_conditions:
        op.execute(
            f"INSERT INTO bloom_preset_conditions (name, description, is_active, created_at, updated_at) "
            f"VALUES ('{condition['name']}', '{condition['description']}', true, now(), now())"
        )

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('bloom_profiles', sa.Column('complications', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='complications'))
    op.add_column('bloom_profiles', sa.Column('condition', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='basic disease'))
    op.add_column('bloom_profiles', sa.Column('condition_level', sa.INTEGER(), autoincrement=False, nullable=True, comment='disease level: 1-mild, 2-moderate, 3-severe'))
    op.drop_table('bloom_user_conditions')
    op.drop_table('bloom_user_complications')
    op.drop_table('bloom_preset_conditions')
    op.drop_table('bloom_preset_complications')
    # ### end Alembic commands ###
